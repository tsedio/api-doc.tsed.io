(window.webpackJsonp=window.webpackJsonp||[]).push([[626],{1379:function(e,t,a){"use strict";a.r(t);var s=a(1),p=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"interface-os3parameter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interface-os3parameter"}},[e._v("#")]),e._v(" Interface OS3Parameter")]),e._v(" "),a("Badge",{attrs:{text:"Interface",type:"interface"}}),e._v(" "),a("section",{staticClass:"table-features"},[a("table",{staticClass:"is-full-width"},[a("tbody",[a("tr",[a("th",[e._v("Module")]),a("td",[a("div",{staticClass:"lang-typescript"},[a("span",{staticClass:"token keyword"},[e._v("import")]),e._v(" { OS3Parameter } "),a("span",{staticClass:"token keyword"},[e._v("from")]),e._v(" "),a("span",{staticClass:"token string"},[e._v('"@tsed/openspec"')])])])]),a("tr",[a("th",[e._v("Source")]),a("td",[a("a",{attrs:{href:"https://github.com/tsedio/tsed/blob/v7.54.0/packages/specs/openspec/src/types/openspec3/OS3Parameter.ts#L0-L0"}},[e._v("/packages/specs/openspec/src/types/openspec3/OS3Parameter.ts")])])])])])]),e._v(" "),a("h2",{attrs:{id:"overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),a("div",{staticClass:"language-typescript"},[a("pre",{pre:!0,attrs:{class:"language-typescript"}},[a("code",{pre:!0,attrs:{class:"typescript-lang "}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("interface")]),e._v(" OS3Parameter<"),a("a",{pre:!0,attrs:{href:"/api/orm/mongoose/types/decorators/Schema.html"}},[a("span",{pre:!0,attrs:{class:"token"}},[e._v("Schema")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(" = ")]),a("a",{pre:!0,attrs:{href:"/api/specs/openspec/types/openspec3/OS3Schema.html"}},[a("span",{pre:!0,attrs:{class:"token"}},[e._v("OS3Schema")])]),e._v("> "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n"),a("div",{pre:!0,attrs:{class:"language- extra-class"}},[a("pre",[a("code",[e._v('name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>\n\nin<span class="token punctuation">:</span> <span class="token string">"path"</span> | "query" | "header" | "cookie"<span class="token punctuation">;</span>\n\nrequired<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">;</span>\n\ndescription?<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>\n\ndeprecated?<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">;</span>\n\nallowEmptyValue?<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">;</span>\n\nschema?<span class="token punctuation">:</span> <a href="/api/specs/openspec/types/openspec3/OS3Schema.html"><span class="token">OS3Schema</span></a> | <a href="/api/specs/openspec/types/common/OpenSpecRef.html"><span class="token">OpenSpecRef</span></a><span class="token punctuation">;</span>\n\nstyle?<span class="token punctuation">:</span> <a href="/api/specs/openspec/types/openspec3/OS3StyleParameter.html"><span class="token">OS3StyleParameter</span></a><span class="token punctuation">;</span>\n\nexplode?<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">;</span>\n\nallowReserved?<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">;</span>\n\nexample?<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">;</span>\n\nexamples?<span class="token punctuation">:</span> <a href="/api/specs/openspec/types/common/OpenSpecHash.html"><span class="token">OpenSpecHash</span></a>&lt;<a href="/api/specs/openspec/types/openspec3/OS3Example.html"><span class="token">OS3Example</span></a> | <a href="/api/specs/openspec/types/common/OpenSpecRef.html"><span class="token">OpenSpecRef</span></a>&gt;<span class="token punctuation">;</span>\n\ncontent?<span class="token punctuation">:</span> <a href="/api/specs/openspec/types/common/OpenSpecHash.html"><span class="token">OpenSpecHash</span></a>&lt;<a href="/api/specs/openspec/types/openspec3/OS3MediaType.html"><span class="token">OS3MediaType</span></a>&gt;<span class="token punctuation">;</span>\n')])])]),a("p",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])])])])]),a("p"),e._v(" "),a("h2",{attrs:{id:"members"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#members"}},[e._v("#")]),e._v(" Members")]),e._v(" "),a("div",{pre:!0},[a("div",{pre:!0,attrs:{class:"method-overview"}},[a("div",{pre:!0,attrs:{class:"language-typescript"}},[a("pre",{pre:!0,attrs:{class:"language-typescript","v-pre":""}},[a("code",{pre:!0,attrs:{class:"typescript-lang "}},[e._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")])])])])]),e._v(" "),a("p",[e._v("The name of the parameter. Parameter names are case sensitive.")]),e._v(" "),a("ul",[a("li",[e._v("If "),a("a",{pre:!0,attrs:{href:"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#parameterIn",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("in")]),a("OutboundLink",{pre:!0})],1),e._v(" is "),a("code",[e._v('"path"')]),e._v(", the "),a("code",[e._v("name")]),e._v(" field MUST correspond to the associated "),a("a",{pre:!0,attrs:{href:"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#pathsPath",target:"_blank",rel:"noopener noreferrer"}},[e._v("path"),a("OutboundLink",{pre:!0})],1),e._v(" segment from the path field in the "),a("a",{pre:!0,attrs:{href:"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#pathsObject",target:"_blank",rel:"noopener noreferrer"}},[e._v("Paths Object"),a("OutboundLink",{pre:!0})],1),e._v(". See "),a("a",{pre:!0,attrs:{href:"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#pathTemplating",target:"_blank",rel:"noopener noreferrer"}},[e._v("Path Templating"),a("OutboundLink",{pre:!0})],1),e._v(" for further information.")]),e._v(" "),a("li",[e._v("If "),a("a",{pre:!0,attrs:{href:"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#parameterIn",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("in")]),a("OutboundLink",{pre:!0})],1),e._v(" is "),a("code",[e._v('"header"')]),e._v(" and the "),a("code",[e._v("name")]),e._v(" field is "),a("code",[e._v('"Accept"')]),e._v(", "),a("code",[e._v('"Content-Type"')]),e._v(" or "),a("code",[e._v('"Authorization"')]),e._v(", the parameter definition SHALL be ignored.")]),e._v(" "),a("li",[e._v("For all other cases, the "),a("code",[e._v("name")]),e._v(" corresponds to the parameter name used by the "),a("a",{pre:!0,attrs:{href:"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#parameterIn",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("in")]),a("OutboundLink",{pre:!0})],1),e._v(" property.")])])]),a("hr"),e._v(" "),a("div",{pre:!0},[a("div",{pre:!0,attrs:{class:"method-overview"}},[a("div",{pre:!0,attrs:{class:"language-typescript"}},[a("pre",{pre:!0,attrs:{class:"language-typescript","v-pre":""}},[a("code",{pre:!0,attrs:{class:"typescript-lang "}},[e._v("in"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"path"')]),e._v(' | "query" | "header" | "cookie"'),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")])])])])]),e._v(" "),a("p",[e._v("The location of the parameter. Possible values are "),a("code",[e._v('"query"')]),e._v(", "),a("code",[e._v('"header"')]),e._v(", "),a("code",[e._v('"path"')]),e._v(" or "),a("code",[e._v('"cookie"')]),e._v(".")])]),a("hr"),e._v(" "),a("div",{pre:!0},[a("div",{pre:!0,attrs:{class:"method-overview"}},[a("div",{pre:!0,attrs:{class:"language-typescript"}},[a("pre",{pre:!0,attrs:{class:"language-typescript","v-pre":""}},[a("code",{pre:!0,attrs:{class:"typescript-lang "}},[e._v("required"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")])])])])]),e._v(" "),a("p",[e._v("Determines whether this parameter is mandatory. If the [parameter location](Determines whether this parameter is mandatory.\nIf the parameter location is "),a("code",[e._v('"path"')]),e._v(", this property is "),a("strong",[e._v("REQUIRED")]),e._v(" and its value MUST be "),a("code",[e._v("true")]),e._v(".\nOtherwise, the property MAY be included and its default value is false.) is "),a("code",[e._v('"path"')]),e._v(", this property is "),a("strong",[e._v("REQUIRED")]),e._v(" and its value MUST be "),a("code",[e._v("true")]),e._v(".\nOtherwise, the property MAY be included and its default value is "),a("code",[e._v("false")]),e._v(".")])]),a("hr"),e._v(" "),a("div",{pre:!0},[a("div",{pre:!0,attrs:{class:"method-overview"}},[a("div",{pre:!0,attrs:{class:"language-typescript"}},[a("pre",{pre:!0,attrs:{class:"language-typescript","v-pre":""}},[a("code",{pre:!0,attrs:{class:"typescript-lang "}},[e._v("description?"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")])])])])]),e._v(" "),a("p",[e._v("A brief description of the parameter. This could contain examples of use. CommonMark syntax MAY be used for rich text representation.")])]),a("hr"),e._v(" "),a("div",{pre:!0},[a("div",{pre:!0,attrs:{class:"method-overview"}},[a("div",{pre:!0,attrs:{class:"language-typescript"}},[a("pre",{pre:!0,attrs:{class:"language-typescript","v-pre":""}},[a("code",{pre:!0,attrs:{class:"typescript-lang "}},[e._v("deprecated?"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")])])])])]),e._v(" "),a("p",[e._v("Specifies that a parameter is deprecated and SHOULD be transitioned out of usage.")])]),a("hr"),e._v(" "),a("div",{pre:!0},[a("div",{pre:!0,attrs:{class:"method-overview"}},[a("div",{pre:!0,attrs:{class:"language-typescript"}},[a("pre",{pre:!0,attrs:{class:"language-typescript","v-pre":""}},[a("code",{pre:!0,attrs:{class:"typescript-lang "}},[e._v("allowEmptyValue?"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")])])])])]),e._v(" "),a("p",[e._v("Sets the ability to pass empty-valued parameters.\nThis is valid only for query parameters and allows sending a parameter with an empty value.\nDefault value is "),a("code",[e._v("false")]),e._v(".\nIf style is used, and if behavior is "),a("code",[e._v("n/a")]),e._v(" (cannot be serialized), the value of "),a("code",[e._v("allowEmptyValue")]),e._v(" SHALL be ignored.")])]),a("hr"),e._v(" "),a("div",{pre:!0},[a("div",{pre:!0,attrs:{class:"method-overview"}},[a("div",{pre:!0,attrs:{class:"language-typescript"}},[a("pre",{pre:!0,attrs:{class:"language-typescript","v-pre":""}},[a("code",{pre:!0,attrs:{class:"typescript-lang "}},[e._v("schema?"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("a",{pre:!0,attrs:{href:"/api/specs/openspec/types/openspec3/OS3Schema.html"}},[a("span",{pre:!0,attrs:{class:"token"}},[e._v("OS3Schema")])]),e._v(" | "),a("a",{pre:!0,attrs:{href:"/api/specs/openspec/types/common/OpenSpecRef.html"}},[a("span",{pre:!0,attrs:{class:"token"}},[e._v("OpenSpecRef")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")])])])])]),e._v(" "),a("p",[e._v("The schema defining the type used for the parameter.")])]),a("hr"),e._v(" "),a("div",{pre:!0},[a("div",{pre:!0,attrs:{class:"method-overview"}},[a("div",{pre:!0,attrs:{class:"language-typescript"}},[a("pre",{pre:!0,attrs:{class:"language-typescript","v-pre":""}},[a("code",{pre:!0,attrs:{class:"typescript-lang "}},[e._v("style?"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("a",{pre:!0,attrs:{href:"/api/specs/openspec/types/openspec3/OS3StyleParameter.html"}},[a("span",{pre:!0,attrs:{class:"token"}},[e._v("OS3StyleParameter")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")])])])])]),e._v(" "),a("p",[e._v("Describes how the parameter value will be serialized depending on the type of the parameter value.\nDefault values (based on value of in): for "),a("code",[e._v("query")]),e._v(" - "),a("code",[e._v("form")]),e._v("; for "),a("code",[e._v("path")]),e._v(" - "),a("code",[e._v("simple")]),e._v("; for "),a("code",[e._v("header")]),e._v(" - "),a("code",[e._v("simple")]),e._v("; for "),a("code",[e._v("cookie")]),e._v(" - "),a("code",[e._v("form")]),e._v(".\nSee "),a("a",{pre:!0,attrs:{href:"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#style-values",target:"_blank",rel:"noopener noreferrer"}},[e._v("style values"),a("OutboundLink",{pre:!0})],1),e._v(".")])]),a("hr"),e._v(" "),a("div",{pre:!0},[a("div",{pre:!0,attrs:{class:"method-overview"}},[a("div",{pre:!0,attrs:{class:"language-typescript"}},[a("pre",{pre:!0,attrs:{class:"language-typescript","v-pre":""}},[a("code",{pre:!0,attrs:{class:"typescript-lang "}},[e._v("explode?"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")])])])])]),e._v(" "),a("p",[e._v("When this is true, parameter values of type array or object generate separate parameters for each value of the array or key-value pair of the map.\nFor other types of parameters this property has no effect. When style is form, the default value is true. For all other styles, the default value is false.")])]),a("hr"),e._v(" "),a("div",{pre:!0},[a("div",{pre:!0,attrs:{class:"method-overview"}},[a("div",{pre:!0,attrs:{class:"language-typescript"}},[a("pre",{pre:!0,attrs:{class:"language-typescript","v-pre":""}},[a("code",{pre:!0,attrs:{class:"typescript-lang "}},[e._v("allowReserved?"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")])])])])]),e._v(" "),a("p",[e._v("Determines whether the parameter value SHOULD allow reserved characters, as defined by "),a("a",{pre:!0,attrs:{href:"https://tools.ietf.org/html/rfc3986#section-2.2",target:"_blank",rel:"noopener noreferrer"}},[e._v("RFC3986"),a("OutboundLink",{pre:!0})],1),e._v(" "),a("code",[e._v(":/?#[]@!$&'()*+,;=")]),e._v(" to be included without percent-encoding.\nThis property only applies to parameters with an "),a("code",[e._v("in")]),e._v(" value of "),a("code",[e._v("query")]),e._v(". The default value is "),a("code",[e._v("false")]),e._v(".")])]),a("hr"),e._v(" "),a("div",{pre:!0},[a("div",{pre:!0,attrs:{class:"method-overview"}},[a("div",{pre:!0,attrs:{class:"language-typescript"}},[a("pre",{pre:!0,attrs:{class:"language-typescript","v-pre":""}},[a("code",{pre:!0,attrs:{class:"typescript-lang "}},[e._v("example?"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("any")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")])])])])]),e._v(" "),a("p",[e._v("Example of the media type.\nThe "),a("code",[e._v("example")]),e._v(" SHOULD match the specified schema and encoding properties if present.\nThe "),a("code",[e._v("example")]),e._v(" field is mutually exclusive of the "),a("code",[e._v("examples")]),e._v(" field.\nFurthermore, if referencing a "),a("code",[e._v("schema")]),e._v(" which contains an example, the "),a("code",[e._v("example")]),e._v(" value SHALL override the example provided by the schema.\nTo represent examples of media types that cannot naturally be represented in JSON or YAML, a string value can contain the example with escaping where necessary.")])]),a("hr"),e._v(" "),a("div",{pre:!0},[a("div",{pre:!0,attrs:{class:"method-overview"}},[a("div",{pre:!0,attrs:{class:"language-typescript"}},[a("pre",{pre:!0,attrs:{class:"language-typescript","v-pre":""}},[a("code",{pre:!0,attrs:{class:"typescript-lang "}},[e._v("examples?"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("a",{pre:!0,attrs:{href:"/api/specs/openspec/types/common/OpenSpecHash.html"}},[a("span",{pre:!0,attrs:{class:"token"}},[e._v("OpenSpecHash")])]),e._v("<"),a("a",{pre:!0,attrs:{href:"/api/specs/openspec/types/openspec3/OS3Example.html"}},[a("span",{pre:!0,attrs:{class:"token"}},[e._v("OS3Example")])]),e._v(" | "),a("a",{pre:!0,attrs:{href:"/api/specs/openspec/types/common/OpenSpecRef.html"}},[a("span",{pre:!0,attrs:{class:"token"}},[e._v("OpenSpecRef")])]),e._v(">"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")])])])])]),e._v(" "),a("p",[e._v("Examples of the media type.\nEach example SHOULD contain a value in the correct format as specified in the parameter encoding.\nThe "),a("code",[e._v("examples")]),e._v(" field is mutually exclusive of the "),a("code",[e._v("example")]),e._v(" field.\nFurthermore, if referencing a "),a("code",[e._v("schema")]),e._v(" which contains an example, the examples value SHALL override the example provided by the schema.")])]),a("hr"),e._v(" "),a("div",{pre:!0},[a("div",{pre:!0,attrs:{class:"method-overview"}},[a("div",{pre:!0,attrs:{class:"language-typescript"}},[a("pre",{pre:!0,attrs:{class:"language-typescript","v-pre":""}},[a("code",{pre:!0,attrs:{class:"typescript-lang "}},[e._v("/***")])])])])]),a("hr"),e._v(" "),a("div",{pre:!0},[a("div",{pre:!0,attrs:{class:"method-overview"}},[a("div",{pre:!0,attrs:{class:"language-typescript"}},[a("pre",{pre:!0,attrs:{class:"language-typescript","v-pre":""}},[a("code",{pre:!0,attrs:{class:"typescript-lang "}},[e._v("* A map containing the representations for the parameter. The key is the media type and the value describes it. The map MUST only contain one entry.")])])])])]),a("hr"),e._v(" "),a("div",{pre:!0},[a("div",{pre:!0,attrs:{class:"method-overview"}},[a("div",{pre:!0,attrs:{class:"language-typescript"}},[a("pre",{pre:!0,attrs:{class:"language-typescript","v-pre":""}},[a("code",{pre:!0,attrs:{class:"typescript-lang "}},[e._v("content?"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("a",{pre:!0,attrs:{href:"/api/specs/openspec/types/common/OpenSpecHash.html"}},[a("span",{pre:!0,attrs:{class:"token"}},[e._v("OpenSpecHash")])]),e._v("<"),a("a",{pre:!0,attrs:{href:"/api/specs/openspec/types/openspec3/OS3MediaType.html"}},[a("span",{pre:!0,attrs:{class:"token"}},[e._v("OS3MediaType")])]),e._v(">"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")])])])])])])],1)}),[],!1,null,null,null);t.default=p.exports}}]);